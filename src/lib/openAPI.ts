/**
 * This file was auto-generated by openapi-to-ts. Do not change it manually!
 */

export interface ICreatureArrayStrFilterSchema {
  field: CreatureArrayStrFilterEnum;
  comparator: ArrayFilterComparators;
  value?: Partial<string> & Partial<number>;
}

export interface ICreatureFiltersSchema {
  filters: Array<
    | ICreatureIntFilterSchema
    | ICreatureStrFilterSchema
    | ICreatureArrayStrFilterSchema
    | ICreatureNullFilterSchema
  >;
}

export interface ICreatureIntFilterSchema {
  field: CreatureIntFilterEnum;
  comparator: NumericFilterComparators;
  value: Partial<number> & Partial<number>;
}

export interface ICreatureModel {
  id: number;
  name: string;
  slug: string;
  description?: string;
  battle_sprite: string;
  health: number;
  attack: number;
  intelligence: number;
  defense: number;
  speed: number;
  klass: IKlassModel;
  race: IRaceModel;
  sources: Array<ISourceModel>;
  trait: ITraitModel;
  created_at: string;
  updated_at: string;
}

export interface ICreatureNullFilterSchema {
  field: CreatureAllFilterEnum;
  comparator: NullFilterComparators;
  value: any;
}

export interface ICreatureSortingRequestSchema {
  by?: CreatureSortingEnum;
  direction?: SortDirections;
}

export interface ICreatureSortingResponseSchema {
  by: CreatureSortingEnum;
  direction: SortDirections;
}

export interface ICreatureStrFilterSchema {
  field: CreatureStrFilterEnum;
  comparator: StringFilterComparators;
  value: string;
}

export interface ICreaturesGetSchema {
  data: ICreatureModel;
}

export interface ICreaturesIndexSchema {
  data: Array<ICreatureModel>;
  pagination: IPaginationResponseSchema;
  sorting: ICreatureSortingResponseSchema;
}

export interface ICreaturesSearchRequest {
  filter: ICreatureFiltersSchema;
  pagination?: IPaginationRequestSchema;
  sorting?: ICreatureSortingRequestSchema;
}

export interface ICreaturesSearchSchema {
  data: Array<ICreatureModel>;
  filter: ICreatureFiltersSchema;
  pagination: IPaginationResponseSchema;
  sorting: ICreatureSortingResponseSchema;
}

export interface IHTTPValidationError {
  detail?: Array<IValidationError>;
}

export interface IHealthCheckSchema {
  healthcheck: boolean;
}

export interface IKlassFiltersSchema {
  filters: Array<
    IKlassIntFilterSchema | IKlassStrFilterSchema | IKlassNullFilterSchema
  >;
}

export interface IKlassIntFilterSchema {
  field: KlassIntFilterEnum;
  comparator: NumericFilterComparators;
  value: Partial<number> & Partial<number>;
}

export interface IKlassModel {
  id: number;
  name: string;
  slug: string;
  description?: string;
  color: string;
  icon: string;
  created_at: string;
  updated_at: string;
}

export interface IKlassNullFilterSchema {
  field: KlassAllFilterEnum;
  comparator: NullFilterComparators;
  value: any;
}

export interface IKlassSortingRequestSchema {
  by?: KlassSortingEnum;
  direction?: SortDirections;
}

export interface IKlassSortingResponseSchema {
  by: KlassSortingEnum;
  direction: SortDirections;
}

export interface IKlassStrFilterSchema {
  field: KlassStrFilterEnum;
  comparator: StringFilterComparators;
  value: string;
}

export interface IKlassesGetSchema {
  data: IKlassModel;
}

export interface IKlassesIndexSchema {
  data: Array<IKlassModel>;
  pagination: IPaginationResponseSchema;
  sorting: IKlassSortingResponseSchema;
}

export interface IKlassesSearchRequest {
  filter: IKlassFiltersSchema;
  pagination?: IPaginationRequestSchema;
  sorting?: IKlassSortingRequestSchema;
}

export interface IKlassesSearchSchema {
  data: Array<IKlassModel>;
  filter: IKlassFiltersSchema;
  pagination: IPaginationResponseSchema;
  sorting: IKlassSortingResponseSchema;
}

export interface IPaginationRequestSchema {
  page?: number;
  size?: number;
}

export interface IPaginationResponseSchema {
  page: number;
  size: number;
  count: number;
}

export interface IPerkArrayStrFilterSchema {
  field: PerkArrayStrFilterEnum;
  comparator: ArrayFilterComparators;
  value?: Partial<string> & Partial<number>;
}

export interface IPerkBoolFilterSchema {
  field: PerkBoolFilterEnum;
  comparator: BoolFilterComparators;
  value: boolean;
}

export interface IPerkFiltersSchema {
  filters: Array<
    | IPerkIntFilterSchema
    | IPerkBoolFilterSchema
    | IPerkStrFilterSchema
    | IPerkArrayStrFilterSchema
    | IPerkNullFilterSchema
  >;
}

export interface IPerkIntFilterSchema {
  field: PerkIntFilterEnum;
  comparator: NumericFilterComparators;
  value: Partial<number> & Partial<number>;
}

export interface IPerkModel {
  id: number;
  name: string;
  slug: string;
  description?: string;
  icon?: string;
  ranks: number;
  cost: number;
  annointment: boolean;
  ascension: boolean;
  specialization: ISpecializationModel;
  tags: Array<string>;
  created_at: string;
  updated_at: string;
}

export interface IPerkNullFilterSchema {
  field: PerkAllFilterEnum;
  comparator: NullFilterComparators;
  value: any;
}

export interface IPerkSortingRequestSchema {
  by?: PerkSortingEnum;
  direction?: SortDirections;
}

export interface IPerkSortingResponseSchema {
  by: PerkSortingEnum;
  direction: SortDirections;
}

export interface IPerkStrFilterSchema {
  field: PerkStrFilterEnum;
  comparator: StringFilterComparators;
  value: string;
}

export interface IPerksGetSchema {
  data: IPerkModel;
}

export interface IPerksIndexSchema {
  data: Array<IPerkModel>;
  pagination: IPaginationResponseSchema;
  sorting: IPerkSortingResponseSchema;
}

export interface IPerksSearchRequest {
  filter: IPerkFiltersSchema;
  pagination?: IPaginationRequestSchema;
  sorting?: IPerkSortingRequestSchema;
}

export interface IPerksSearchSchema {
  data: Array<IPerkModel>;
  filter: IPerkFiltersSchema;
  pagination: IPaginationResponseSchema;
  sorting: IPerkSortingResponseSchema;
}

export interface IRaceFiltersSchema {
  filters: Array<
    IRaceIntFilterSchema | IRaceStrFilterSchema | IRaceNullFilterSchema
  >;
}

export interface IRaceIntFilterSchema {
  field: RaceIntFilterEnum;
  comparator: NumericFilterComparators;
  value: Partial<number> & Partial<number>;
}

export interface IRaceModel {
  id: number;
  name: string;
  slug: string;
  description?: string;
  icon: string;
  default_klass: IKlassModel;
  created_at: string;
  updated_at: string;
}

export interface IRaceNullFilterSchema {
  field: RaceAllFilterEnum;
  comparator: NullFilterComparators;
  value: any;
}

export interface IRaceSortingRequestSchema {
  by?: RaceSortingEnum;
  direction?: SortDirections;
}

export interface IRaceSortingResponseSchema {
  by: RaceSortingEnum;
  direction: SortDirections;
}

export interface IRaceStrFilterSchema {
  field: RaceStrFilterEnum;
  comparator: StringFilterComparators;
  value: string;
}

export interface IRacesGetSchema {
  data: IRaceModel;
}

export interface IRacesIndexSchema {
  data: Array<IRaceModel>;
  pagination: IPaginationResponseSchema;
  sorting: IRaceSortingResponseSchema;
}

export interface IRacesSearchRequest {
  filter: IRaceFiltersSchema;
  pagination?: IPaginationRequestSchema;
  sorting?: IRaceSortingRequestSchema;
}

export interface IRacesSearchSchema {
  data: Array<IRaceModel>;
  filter: IRaceFiltersSchema;
  pagination: IPaginationResponseSchema;
  sorting: IRaceSortingResponseSchema;
}

export interface IRootSchema {
  data: IHealthCheckSchema;
}

export interface ISourceFiltersSchema {
  filters: Array<
    ISourceIntFilterSchema | ISourceStrFilterSchema | ISourceNullFilterSchema
  >;
}

export interface ISourceIntFilterSchema {
  field: SourceIntFilterEnum;
  comparator: NumericFilterComparators;
  value: Partial<number> & Partial<number>;
}

export interface ISourceModel {
  id: number;
  name: string;
  slug: string;
  description?: string;
  created_at: string;
  updated_at: string;
}

export interface ISourceNullFilterSchema {
  field: SourceAllFilterEnum;
  comparator: NullFilterComparators;
  value: any;
}

export interface ISourceSortingRequestSchema {
  by?: SourceSortingEnum;
  direction?: SortDirections;
}

export interface ISourceSortingResponseSchema {
  by: SourceSortingEnum;
  direction: SortDirections;
}

export interface ISourceStrFilterSchema {
  field: SourceStrFilterEnum;
  comparator: StringFilterComparators;
  value: string;
}

export interface ISourcesGetSchema {
  data: ISourceModel;
}

export interface ISourcesIndexSchema {
  data: Array<ISourceModel>;
  pagination: IPaginationResponseSchema;
  sorting: ISourceSortingResponseSchema;
}

export interface ISourcesSearchRequest {
  filter: ISourceFiltersSchema;
  pagination?: IPaginationRequestSchema;
  sorting?: ISourceSortingRequestSchema;
}

export interface ISourcesSearchSchema {
  data: Array<ISourceModel>;
  filter: ISourceFiltersSchema;
  pagination: IPaginationResponseSchema;
  sorting: ISourceSortingResponseSchema;
}

export interface ISpecializationFiltersSchema {
  filters: Array<
    | ISpecializationIntFilterSchema
    | ISpecializationStrFilterSchema
    | ISpecializationNullFilterSchema
  >;
}

export interface ISpecializationIntFilterSchema {
  field: SpecializationIntFilterEnum;
  comparator: NumericFilterComparators;
  value: Partial<number> & Partial<number>;
}

export interface ISpecializationModel {
  id: number;
  name: string;
  slug: string;
  description?: string;
  icon?: string;
  created_at: string;
  updated_at: string;
}

export interface ISpecializationNullFilterSchema {
  field: SpecializationAllFilterEnum;
  comparator: NullFilterComparators;
  value: any;
}

export interface ISpecializationSortingRequestSchema {
  by?: SpecializationSortingEnum;
  direction?: SortDirections;
}

export interface ISpecializationSortingResponseSchema {
  by: SpecializationSortingEnum;
  direction: SortDirections;
}

export interface ISpecializationStrFilterSchema {
  field: SpecializationStrFilterEnum;
  comparator: StringFilterComparators;
  value: string;
}

export interface ISpecializationsGetSchema {
  data: ISpecializationModel;
}

export interface ISpecializationsIndexSchema {
  data: Array<ISpecializationModel>;
  pagination: IPaginationResponseSchema;
  sorting: ISpecializationSortingResponseSchema;
}

export interface ISpecializationsSearchRequest {
  filter: ISpecializationFiltersSchema;
  pagination?: IPaginationRequestSchema;
  sorting?: ISpecializationSortingRequestSchema;
}

export interface ISpecializationsSearchSchema {
  data: Array<ISpecializationModel>;
  filter: ISpecializationFiltersSchema;
  pagination: IPaginationResponseSchema;
  sorting: ISpecializationSortingResponseSchema;
}

export interface ISpellArrayStrFilterSchema {
  field: SpellArrayStrFilterEnum;
  comparator: ArrayFilterComparators;
  value?: Partial<string> & Partial<number>;
}

export interface ISpellFiltersSchema {
  filters: Array<
    | ISpellIntFilterSchema
    | ISpellStrFilterSchema
    | ISpellArrayStrFilterSchema
    | ISpellNullFilterSchema
  >;
}

export interface ISpellIntFilterSchema {
  field: SpellIntFilterEnum;
  comparator: NumericFilterComparators;
  value: Partial<number> & Partial<number>;
}

export interface ISpellModel {
  id: number;
  name: string;
  slug: string;
  description?: string;
  charges: number;
  klass: IKlassModel;
  source: ISourceModel;
  tags: Array<string>;
  created_at: string;
  updated_at: string;
}

export interface ISpellNullFilterSchema {
  field: SpellAllFilterEnum;
  comparator: NullFilterComparators;
  value: any;
}

export interface ISpellSortingRequestSchema {
  by?: SpellSortingEnum;
  direction?: SortDirections;
}

export interface ISpellSortingResponseSchema {
  by: SpellSortingEnum;
  direction: SortDirections;
}

export interface ISpellStrFilterSchema {
  field: SpellStrFilterEnum;
  comparator: StringFilterComparators;
  value: string;
}

export interface ISpellsGetSchema {
  data: ISpellModel;
}

export interface ISpellsIndexSchema {
  data: Array<ISpellModel>;
  pagination: IPaginationResponseSchema;
  sorting: ISpellSortingResponseSchema;
}

export interface ISpellsSearchRequest {
  filter: ISpellFiltersSchema;
  pagination?: IPaginationRequestSchema;
  sorting?: ISpellSortingRequestSchema;
}

export interface ISpellsSearchSchema {
  data: Array<ISpellModel>;
  filter: ISpellFiltersSchema;
  pagination: IPaginationResponseSchema;
  sorting: ISpellSortingResponseSchema;
}

export interface IStatusEffectFiltersSchema {
  filters: Array<
    | IStatusEffectIntFilterSchema
    | IStatusEffectStrFilterSchema
    | IStatusEffectNullFilterSchema
  >;
}

export interface IStatusEffectIntFilterSchema {
  field: StatusEffectIntFilterEnum;
  comparator: NumericFilterComparators;
  value: Partial<number> & Partial<number>;
}

export interface IStatusEffectModel {
  id: number;
  name: string;
  slug: string;
  description?: string;
  category: StatusEffectCategoriesEnum;
  icon: string;
  turns?: number;
  leave_chance?: number;
  max_stacks: number;
  created_at: string;
  updated_at: string;
}

export interface IStatusEffectNullFilterSchema {
  field: StatusEffectAllFilterEnum;
  comparator: NullFilterComparators;
  value: any;
}

export interface IStatusEffectStrFilterSchema {
  field: StatusEffectStrFilterEnum;
  comparator: StringFilterComparators;
  value: string;
}

export interface IStatusEffectsGetSchema {
  data: IStatusEffectModel;
}

export interface IStatusEffectsIndexSchema {
  data: Array<IStatusEffectModel>;
  pagination: IPaginationResponseSchema;
  sorting: IStatusEffetSortingResponseSchema;
}

export interface IStatusEffectsSearchRequest {
  filter: IStatusEffectFiltersSchema;
  pagination?: IPaginationRequestSchema;
  sorting?: IStatusEffetSortingRequestSchema;
}

export interface IStatusEffectsSearchSchema {
  data: Array<IStatusEffectModel>;
  filter: IStatusEffectFiltersSchema;
  pagination: IPaginationResponseSchema;
  sorting: IStatusEffetSortingResponseSchema;
}

export interface IStatusEffetSortingRequestSchema {
  by?: StatusEffetSortingEnum;
  direction?: SortDirections;
}

export interface IStatusEffetSortingResponseSchema {
  by: StatusEffetSortingEnum;
  direction: SortDirections;
}

export interface ITraitArrayStrFilterSchema {
  field: TraitArrayStrFilterEnum;
  comparator: ArrayFilterComparators;
  value?: Partial<string> & Partial<number>;
}

export interface ITraitFiltersSchema {
  filters: Array<
    | ITraitIntFilterSchema
    | ITraitStrFilterSchema
    | ITraitArrayStrFilterSchema
    | ITraitNullFilterSchema
  >;
}

export interface ITraitIntFilterSchema {
  field: TraitIntFilterEnum;
  comparator: NumericFilterComparators;
  value: Partial<number> & Partial<number>;
}

export interface ITraitModel {
  id: number;
  name: string;
  slug: string;
  description?: string;
  material_name?: string;
  tags: Array<string>;
  created_at: string;
  updated_at: string;
}

export interface ITraitNullFilterSchema {
  field: TraitAllFilterEnum;
  comparator: NullFilterComparators;
  value: any;
}

export interface ITraitSortingRequestSchema {
  by?: TraitSortingEnum;
  direction?: SortDirections;
}

export interface ITraitSortingResponseSchema {
  by: TraitSortingEnum;
  direction: SortDirections;
}

export interface ITraitStrFilterSchema {
  field: TraitStrFilterEnum;
  comparator: StringFilterComparators;
  value: string;
}

export interface ITraitsGetSchema {
  data: ITraitModel;
}

export interface ITraitsIndexSchema {
  data: Array<ITraitModel>;
  pagination: IPaginationResponseSchema;
  sorting: ITraitSortingResponseSchema;
}

export interface ITraitsSearchRequest {
  filter: ITraitFiltersSchema;
  pagination?: IPaginationRequestSchema;
  sorting?: ITraitSortingRequestSchema;
}

export interface ITraitsSearchSchema {
  data: Array<ITraitModel>;
  filter: ITraitFiltersSchema;
  pagination: IPaginationResponseSchema;
  sorting: ITraitSortingResponseSchema;
}

export interface IValidationError {
  loc: Array<string>;
  msg: string;
  type: string;
}

/**
 * An enumeration.
 */
export type ArrayFilterComparators = "&&" | "@>" | "<@" | "==" | "!=";

/**
 * An enumeration.
 */
export type BoolFilterComparators = "==" | "!=";

/**
 * An enumeration.
 */
export type CreatureAllFilterEnum =
  | "id"
  | "name"
  | "health"
  | "attack"
  | "intelligence"
  | "defense"
  | "speed"
  | "klass_id"
  | "klass_name"
  | "race_id"
  | "race_name"
  | "trait_id"
  | "trait_name"
  | "trait_tags"
  | "full_text";

/**
 * An enumeration.
 */
export type CreatureArrayStrFilterEnum = "trait_tags";

/**
 * An enumeration.
 */
export type CreatureIntFilterEnum =
  | "id"
  | "health"
  | "attack"
  | "intelligence"
  | "defense"
  | "speed"
  | "klass_id"
  | "race_id"
  | "trait_id";

/**
 * An enumeration.
 */
export type CreatureSortingEnum =
  | "id"
  | "name"
  | "health"
  | "attack"
  | "intelligence"
  | "defense"
  | "speed"
  | "klass_id"
  | "klass_name"
  | "race_id"
  | "race_name"
  | "trait_id"
  | "trait_name"
  | "trait_tags"
  | "full_text";

/**
 * An enumeration.
 */
export type CreatureStrFilterEnum =
  | "name"
  | "klass_name"
  | "race_name"
  | "trait_name"
  | "full_text";

/**
 * An enumeration.
 */
export type KlassAllFilterEnum = "id" | "name";

/**
 * An enumeration.
 */
export type KlassIntFilterEnum = "id";

/**
 * An enumeration.
 */
export type KlassSortingEnum = "id" | "name";

/**
 * An enumeration.
 */
export type KlassStrFilterEnum = "name";

/**
 * An enumeration.
 */
export type NullFilterComparators = "is_null" | "is_not_null";

/**
 * An enumeration.
 */
export type NumericFilterComparators = "==" | "!=" | ">" | ">=" | "<" | "<=";

/**
 * An enumeration.
 */
export type PerkAllFilterEnum =
  | "id"
  | "name"
  | "ranks"
  | "cost"
  | "annointment"
  | "ascension"
  | "specialization_id"
  | "specialization_name"
  | "tags"
  | "full_text";

/**
 * An enumeration.
 */
export type PerkArrayStrFilterEnum = "tags";

/**
 * An enumeration.
 */
export type PerkBoolFilterEnum = "annointment" | "ascension";

/**
 * An enumeration.
 */
export type PerkIntFilterEnum = "id" | "ranks" | "cost" | "specialization_id";

/**
 * An enumeration.
 */
export type PerkSortingEnum =
  | "id"
  | "name"
  | "ranks"
  | "cost"
  | "annointment"
  | "ascension"
  | "specialization_id"
  | "specialization_name"
  | "tags"
  | "full_text";

/**
 * An enumeration.
 */
export type PerkStrFilterEnum = "name" | "specialization_name" | "full_text";

/**
 * An enumeration.
 */
export type RaceAllFilterEnum =
  | "id"
  | "name"
  | "default_klass_id"
  | "default_klass_name"
  | "full_text";

/**
 * An enumeration.
 */
export type RaceIntFilterEnum = "id" | "default_klass_id";

/**
 * An enumeration.
 */
export type RaceSortingEnum =
  | "id"
  | "name"
  | "default_klass_id"
  | "default_klass_name"
  | "full_text";

/**
 * An enumeration.
 */
export type RaceStrFilterEnum = "name" | "default_klass_name" | "full_text";

/**
 * An enumeration.
 */
export type SortDirections = "asc" | "desc";

/**
 * An enumeration.
 */
export type SourceAllFilterEnum = "id" | "name" | "full_text";

/**
 * An enumeration.
 */
export type SourceIntFilterEnum = "id";

/**
 * An enumeration.
 */
export type SourceSortingEnum = "id" | "name" | "full_text";

/**
 * An enumeration.
 */
export type SourceStrFilterEnum = "name" | "full_text";

/**
 * An enumeration.
 */
export type SpecializationAllFilterEnum = "id" | "name";

/**
 * An enumeration.
 */
export type SpecializationIntFilterEnum = "id";

/**
 * An enumeration.
 */
export type SpecializationSortingEnum = "id" | "name";

/**
 * An enumeration.
 */
export type SpecializationStrFilterEnum = "name";

/**
 * An enumeration.
 */
export type SpellAllFilterEnum =
  | "id"
  | "name"
  | "charges"
  | "klass_id"
  | "klass_name"
  | "source_id"
  | "source_name"
  | "tags"
  | "full_text";

/**
 * An enumeration.
 */
export type SpellArrayStrFilterEnum = "tags";

/**
 * An enumeration.
 */
export type SpellIntFilterEnum = "id" | "charges" | "klass_id" | "source_id";

/**
 * An enumeration.
 */
export type SpellSortingEnum =
  | "id"
  | "name"
  | "charges"
  | "klass_id"
  | "klass_name"
  | "source_id"
  | "source_name"
  | "tags"
  | "full_text";

/**
 * An enumeration.
 */
export type SpellStrFilterEnum =
  | "name"
  | "klass_name"
  | "source_name"
  | "full_text";

/**
 * An enumeration.
 */
export type StatusEffectAllFilterEnum =
  | "id"
  | "name"
  | "category"
  | "turns"
  | "leave_chance"
  | "max_stacks"
  | "full_text";

/**
 * An enumeration.
 */
export type StatusEffectCategoriesEnum = "buff" | "debuff" | "minion";

/**
 * An enumeration.
 */
export type StatusEffectIntFilterEnum = "id" | "leave_chance" | "max_stacks";

/**
 * An enumeration.
 */
export type StatusEffectStrFilterEnum =
  | "name"
  | "category"
  | "turns"
  | "full_text";

/**
 * An enumeration.
 */
export type StatusEffetSortingEnum =
  | "id"
  | "name"
  | "category"
  | "turns"
  | "leave_chance"
  | "max_stacks"
  | "full_text";

/**
 * An enumeration.
 */
export type StringFilterComparators = "==" | "!=" | "like" | "ilike";

/**
 * An enumeration.
 */
export type TraitAllFilterEnum =
  | "id"
  | "name"
  | "material_name"
  | "tags"
  | "full_text";

/**
 * An enumeration.
 */
export type TraitArrayStrFilterEnum = "tags";

/**
 * An enumeration.
 */
export type TraitIntFilterEnum = "id";

/**
 * An enumeration.
 */
export type TraitSortingEnum =
  | "id"
  | "name"
  | "material_name"
  | "tags"
  | "full_text";

/**
 * An enumeration.
 */
export type TraitStrFilterEnum = "name" | "material_name" | "full_text";
